import logging
from typing import List, Dict
from datetime import datetime
import asyncio

logger = logging.getLogger(__name__)


class MessageFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self):
        self.max_products_per_message = 10

    def format_welcome_message(self, user_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return f"""
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!*

–Ø - –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ airsoft —à–∞—Ä—ã.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
‚Ä¢ üõí –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–∫–∞–∑–∞
‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ü–µ–Ω—ã
‚Ä¢ üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/prices - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
/products - –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É

üí° *–°–æ–≤–µ—Ç:* –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏!
        """

    def format_competitor_prices(self, competitors: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
        messages = []

        for competitor, products in competitors.items():
            if not products:
                continue

            message = f"üè∑ *{competitor}* - –¶–µ–Ω—ã –Ω–∞ —à–∞—Ä—ã\n\n"

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
            sorted_products = sorted(products, key=lambda x: x['price'])

            for i, product in enumerate(sorted_products[:self.max_products_per_message]):
                price_text = f"~~{product['old_price']}~~ ‚û°Ô∏è {product['price']}" if product.get(
                    'old_price') else f"{product['price']}"

                message += f"{i + 1}. {product['name']}\n"
                message += f"   üí∞ *{price_text}* —Ä—É–±."

                if product.get('weight'):
                    message += f" | ‚öñÔ∏è {product['weight']}"
                if product.get('package'):
                    message += f" | üì¶ {product['package']}"

                message += "\n\n"

            if len(sorted_products) > self.max_products_per_message:
                message += f"*... –∏ –µ—â–µ {len(sorted_products) - self.max_products_per_message} —Ç–æ–≤–∞—Ä–æ–≤*"

            message += f"\nüïí *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            messages.append(message)

        return messages

    def format_our_products(self, products: List[Dict]) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        if not products:
            return ["üõí *–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã*\n\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ç–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."]

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = []
        current_message = "üõí *–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã*\n\n"

        for i, product in enumerate(products):
            product_text = f"*{i + 1}. {product['name']}*\n"
            product_text += f"üí∞ *–¶–µ–Ω–∞:* {product['price']} —Ä—É–±."

            if product.get('old_price'):
                product_text += f" (~~{product['old_price']}~~ üî•)"

            if product.get('weight'):
                product_text += f"\n‚öñÔ∏è *–í–µ—Å:* {product['weight']}"

            if product.get('package'):
                product_text += f"\nüì¶ *–£–ø–∞–∫–æ–≤–∫–∞:* {product['package']}"

            if product.get('description'):
                desc = product['description'][:100] + "..." if len(product['description']) > 100 else product[
                    'description']
                product_text += f"\nüìù {desc}"

            product_text += "\n\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç
            if len(current_message + product_text) > 4000:
                messages.append(current_message)
                current_message = "üõí *–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã* (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n\n"

            current_message += product_text

        if current_message:
            messages.append(current_message)

        return messages

    def format_price_update_message(self, changes: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω"""
        if not changes:
            return "üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω*\n\n–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."

        message = "üîÑ *–û–ë–ù–û–í–õ–ï–ù–ò–ï –¶–ï–ù*\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä–∞
        our_changes = [c for c in changes if c['product_type'] == 'our']
        comp_changes = [c for c in changes if c['product_type'] == 'competitor']

        if our_changes:
            message += "*–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:*\n"
            for change in our_changes[:5]:
                message += f"‚Ä¢ {change['product_name']}: {change['price']} —Ä—É–±.\n"
            message += "\n"

        if comp_changes:
            message += "*–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:*\n"
            for change in comp_changes[:5]:
                message += f"‚Ä¢ {change['product_name']}: {change['price']} —Ä—É–±.\n"
            message += "\n"

        message += f"üìä *–í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:* {len(changes)}\n"
        message += f"üïí *–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        message += "üõí *–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:* https://t.me/c/airsoft_guide/6"

        return message


class Scheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""

    def __init__(self, bot):
        self.bot = bot
        self.tasks = []
        self.is_running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = True

        # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
        update_interval = int(self.bot.db.get_setting('price_update_interval') or 3600)
        update_task = asyncio.create_task(self.schedule_price_updates(update_interval))
        self.tasks.append(update_task)

        logger.info(f"üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_interval} —Å–µ–∫.")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False

        for task in self.tasks:
            task.cancel()

        await asyncio.gather(*self.tasks, return_exceptions=True)
        logger.info("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def schedule_price_updates(self, interval: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω"""
        while self.is_running:
            try:
                await asyncio.sleep(interval)

                logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
                success_count = await self.bot.update_all_prices()
                logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} —Ç–æ–≤–∞—Ä–æ–≤")

                # –ü—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if success_count > 0:
                    from telegram.ext import ContextTypes
                    context = ContextTypes.DEFAULT_TYPE
                    await self.bot.publish_price_update(context)

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('bot.log', encoding='utf-8')
        ]
    )