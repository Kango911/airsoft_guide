from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
import logging
from typing import Dict, List
from database.models import Database
from database.operations import AdminOperations, ProductOperations

logger = logging.getLogger(__name__)


class AdminHandler:
    def __init__(self, db: Database, admin_ops: AdminOperations, product_ops: ProductOperations):
        self.db = db
        self.admin_ops = admin_ops
        self.product_ops = product_ops

    async def get_admin_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã", callback_data="admin_update_prices"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ],
            [
                InlineKeyboardButton("üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="admin_list_admins"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω", callback_data="admin_price_history"),
                InlineKeyboardButton("üõ† –¢–µ—Ö. –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="admin_tech_ops")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id

        if not self.admin_ops.is_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        callback_data = query.data

        try:
            if callback_data == "admin_update_prices":
                await self.handle_update_prices(query, context)
            elif callback_data == "admin_stats":
                await self.handle_show_stats(query)
            elif callback_data == "admin_list_admins":
                await self.handle_list_admins(query)
            elif callback_data == "admin_settings":
                await self.handle_settings(query)
            elif callback_data == "admin_price_history":
                await self.handle_price_history(query)
            elif callback_data == "admin_tech_ops":
                await self.handle_tech_ops(query)
            elif callback_data.startswith("admin_setting_"):
                await self.handle_setting_change(query, callback_data)
            elif callback_data == "admin_back":
                await self.handle_back_to_main(query)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_update_prices(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω"""
        await query.edit_message_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress_message = await query.message.reply_text("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤...")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
            from main import AirsoftBot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            bot = context.application
            success_count = await bot.update_all_prices()

            await progress_message.edit_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {success_count}")

            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –≥—Ä—É–ø–ø–µ
            await bot.publish_price_update(context)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = await self.get_admin_keyboard()
            await query.edit_message_text(
                "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                f"‚úÖ –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
                f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {success_count}",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω")

    async def handle_show_stats(self, query):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_text = await self.get_system_stats()

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]])

        await query.edit_message_text(stats_text, reply_markup=keyboard, parse_mode='Markdown')

    async def get_system_stats(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
            comp_products = self.product_ops.get_all_competitor_products()
            our_products = self.product_ops.get_all_our_products()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
            competitors = {}
            for product in comp_products:
                competitor = product['competitor']
                if competitor not in competitors:
                    competitors[competitor] = 0
                competitors[competitor] += 1

            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
            admins = self.admin_ops.get_all_admins()

            # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
            recent_changes = self.product_ops.get_price_changes(24)  # –ó–∞ 24 —á–∞—Å–∞

            stats_text = "üìä *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            stats_text += f"*–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:* {len(our_products)} —à—Ç.\n"

            for competitor, count in competitors.items():
                stats_text += f"*{competitor}:* {count} —à—Ç.\n"

            stats_text += f"\n*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:* {len(admins)}\n"
            stats_text += f"*–ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∑–∞ 24—á:* {len(recent_changes)}\n"

            # –°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
            if comp_products:
                avg_price = sum(p['price'] for p in comp_products if p['price']) / len(comp_products)
                stats_text += f"*–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:* {avg_price:.2f} —Ä—É–±.\n"

            if our_products:
                our_avg_price = sum(p['price'] for p in our_products if p['price']) / len(our_products)
                stats_text += f"*–ù–∞—à–∞ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:* {our_avg_price:.2f} —Ä—É–±.\n"

            return stats_text

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

    async def handle_list_admins(self, query):
        """–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        admins = self.admin_ops.get_all_admins()

        if not admins:
            text = "üë• *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã*\n\n–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç."
        else:
            text = "üë• *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã*\n\n"
            for admin in admins:
                last_login = admin['last_login'].strftime('%d.%m.%Y %H:%M') if admin['last_login'] else '–ù–∏–∫–æ–≥–¥–∞'
                text += f"‚Ä¢ ID: {admin['user_id']}\n"
                text += f"  –ò–º—è: {admin['full_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                text += f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login}\n\n"

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]])

        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

    async def handle_settings(self, query):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
        settings = [
            ('price_update_interval', '–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (—Å–µ–∫)'),
            ('max_products_per_message', '–¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'),
            ('notification_enabled', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö'),
        ]

        text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
        for key, description in settings:
            value = self.db.get_setting(key)
            text += f"{description}: `{value}`\n"

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="admin_setting_interval")
        ], [
            InlineKeyboardButton("üìù –¢–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏", callback_data="admin_setting_max_products")
        ], [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]])

        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

    async def handle_setting_change(self, query, callback_data):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        setting_key = callback_data.replace('admin_setting_', '')

        setting_names = {
            'interval': 'price_update_interval',
            'max_products': 'max_products_per_message'
        }

        actual_key = setting_names.get(setting_key)
        if not actual_key:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            return

        current_value = self.db.get_setting(actual_key)

        await query.edit_message_text(
            f"‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{current_value}`\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            parse_mode='Markdown'
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        from main import AirsoftBot
        context = query.message._bot_data
        context['awaiting_setting'] = actual_key
        context['setting_message_id'] = query.message.message_id

    async def handle_price_history(self, query):
        """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω"""
        changes = self.product_ops.get_price_changes(24)  # –ó–∞ 24 —á–∞—Å–∞

        if not changes:
            text = "üìà *–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω*\n\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –Ω–µ –±—ã–ª–æ."
        else:
            text = "üìà *–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –∑–∞ 24 —á–∞—Å–∞*\n\n"
            for change in changes[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ–Ω–µ–Ω–∏–π
                product_name = change['product_name'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
                price = change['price']
                change_time = change['change_date'].strftime('%H:%M')
                text += f"‚Ä¢ {change_time} - {product_name}: {price} —Ä—É–±.\n"

            if len(changes) > 10:
                text += f"\n... –∏ –µ—â–µ {len(changes) - 10} –∏–∑–º–µ–Ω–µ–Ω–∏–π"

        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]])

        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

    async def handle_tech_ops(self, query):
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        text = "üõ† *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω", callback_data="admin_clear_history")],
            [InlineKeyboardButton("üìã –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤", callback_data="admin_export_products")],
            [InlineKeyboardButton("üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î", callback_data="admin_check_db")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ])

        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

    async def handle_back_to_main(self, query):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = await self.get_admin_keyboard()
        await query.edit_message_text(
            "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )