#!/usr/bin/env python3
"""
–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ –≥–ª—É–±–æ–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import logging
import sys
from telegram import Update
from telegram.ext import Application, CommandHandler

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class QuickBot:
    def __init__(self):
        from config import get_config
        self.config = get_config()

        # –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(self.config.BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("prices", self.show_prices))

    async def start(self, update: Update, context):
        """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ start"""
        await update.message.reply_text(
            "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /prices –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ü–µ–Ω\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        )

    async def help(self, update: Update, context):
        """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ help"""
        await update.message.reply_text(
            "ü§ñ –ë—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞:\n\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/prices - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )

    async def show_prices(self, update: Update, context):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∫–∞–∑ —Ü–µ–Ω"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã
            from database.operations import ProductOperations
            product_ops = ProductOperations()
            products = product_ops.get_all_competitor_products()

            if products:
                message = "üè∑ *–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:*\n\n"
                for product in products[:5]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    message += f"‚Ä¢ {product['name']}: {product['price']} —Ä—É–±.\n"
                await update.message.reply_text(message, parse_mode='Markdown')
            else:
                await update.message.reply_text("üì≠ –¶–µ–Ω—ã –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω")

    def run(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ...")
        self.application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    bot = QuickBot()
    bot.run()