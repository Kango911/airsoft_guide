import asyncio
import logging
import sys
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler

# –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class FastBot:
    def __init__(self):
        from config import get_config
        self.config = get_config()

        # –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db = None
        self.product_ops = None
        self.admin_ops = None

        # –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram
        self.application = Application.builder().token(self.config.BOT_TOKEN).build()
        self.setup_handlers()

    async def initialize_database(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from database.models import Database
            from database.operations import ProductOperations, AdminOperations

            self.db = Database()
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
            await asyncio.get_event_loop().run_in_executor(None, self.db.initialize)

            self.product_ops = ProductOperations()
            self.admin_ops = AdminOperations()

            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")
            return False

    def setup_handlers(self):
        """–ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("prices", self.show_prices))
        self.application.add_handler(CommandHandler("update", self.update_prices))

    async def start(self, update: Update, context):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç"""
        user = update.effective_user

        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ airsoft —à–∞—Ä—ã.\n\n"
            "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/prices - –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã\n"
            "/update - –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã (–∞–¥–º–∏–Ω—ã)\n"
            "/help - –ü–æ–º–æ—â—å\n\n"
            "‚ö° –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ!"
        )

        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def help(self, update: Update, context):
        """–ë—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞"""
        help_text = (
            "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/prices - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã\n"
            "/update - –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã\n\n"
            "üìû –î–ª—è —Å–≤—è–∑–∏: @–≤–∞—à_–º–µ–Ω–µ–¥–∂–µ—Ä"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def show_prices(self, update: Update, context):
        """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∫–∞–∑ —Ü–µ–Ω"""
        try:
            if self.product_ops is None:
                success = await self.initialize_database()
                if not success:
                    await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≥–æ—Ç–æ–≤–∞")
                    return

            products = self.product_ops.get_all_competitor_products()

            if not products:
                await update.message.reply_text("üì≠ –¶–µ–Ω—ã –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                return

            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            message = "üè∑ *–¶–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:*\n\n"
            for product in products[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                message += f"‚Ä¢ {product['name'][:50]}...\n"
                message += f"  üí∞ {product['price']} —Ä—É–±. | {product['competitor']}\n\n"

            await update.message.reply_text(message, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ü–µ–Ω: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω")

    async def update_prices(self, update: Update, context):
        """–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω"""
        user_id = update.effective_user.id

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
        if user_id not in self.config.ADMIN_IDS:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
            return

        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

        try:
            total_updated = 0

            # –ü–∞—Ä—Å–∏–Ω–≥ StrikePlanet
            if 'strikeplanet' in self.parsers:
                try:
                    products = self.parsers['strikeplanet'].parse_products()
                    if products:
                        for product in products:
                            self.product_ops.add_competitor_product(product)
                        total_updated += len(products)
                        logger.info(f"StrikePlanet: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                        await update.message.reply_text(f"‚úÖ StrikePlanet: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                    else:
                        await update.message.reply_text("‚ùå StrikePlanet: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ StrikePlanet: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ StrikePlanet: {str(e)}")

            # –ü–∞—Ä—Å–∏–Ω–≥ Airsoft-Rus
            if 'airsoftrus' in self.parsers:
                try:
                    products = self.parsers['airsoftrus'].parse_products()
                    if products:
                        for product in products:
                            self.product_ops.add_competitor_product(product)
                        total_updated += len(products)
                        logger.info(f"Airsoft-Rus: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                        await update.message.reply_text(f"‚úÖ Airsoft-Rus: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                    else:
                        await update.message.reply_text("‚ùå Airsoft-Rus: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Airsoft-Rus: {e}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Airsoft-Rus: {str(e)}")

            if total_updated > 0:
                await update.message.reply_text(f"üéâ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

    async def on_startup(self, application):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"""
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(self.initialize_database())

        # –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("prices", "–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
        ]
        await application.bot.set_my_commands(commands)

        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.post_init = self.on_startup
        self.application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    bot = FastBot()
    bot.run()