import asyncio
import logging
import sys
from datetime import datetime

from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from telegram.error import TelegramError

from config import get_config
from database.models import Database
from database.operations import ProductOperations, AdminOperations
from parsers.strikeplanet_parser import StrikePlanetParser
from parsers.airsoftrus_parser import AirsoftRusParser
from parsers.vk_parser import VKParser
from handlers.admin import AdminHandler
from handlers.user import UserHandler
from utils.helpers import MessageFormatter, Scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
config = get_config()
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format=config.LOG_FORMAT,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)


class AirsoftBot:
    def __init__(self):
        self.config = config
        self.db = Database()
        self.product_ops = ProductOperations()
        self.admin_ops = AdminOperations()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
        self.parsers = self.setup_parsers()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.admin_handler = AdminHandler(self.db, self.admin_ops, self.product_ops)
        self.user_handler = UserHandler(self.db, self.product_ops)
        self.formatter = MessageFormatter()
        self.scheduler = Scheduler(self)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
        self.application = Application.builder().token(self.config.BOT_TOKEN).build()

        self.setup_handlers()

    def setup_parsers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        parsers = {}

        if self.config.PARSERS_CONFIG.get('strikeplanet', {}).get('enabled', False):
            parsers['strikeplanet'] = StrikePlanetParser()

        if self.config.PARSERS_CONFIG.get('airsoftrus', {}).get('enabled', False):
            parsers['airsoftrus'] = AirsoftRusParser()

        if (self.config.PARSERS_CONFIG.get('vk', {}).get('enabled', False) and
                self.config.PARSERS_CONFIG['vk'].get('access_token')):
            parsers['vk'] = VKParser(self.config.PARSERS_CONFIG['vk']['access_token'])

        logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä—Å–µ—Ä–æ–≤: {len(parsers)}")
        return parsers

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("prices", self.show_prices))
        self.application.add_handler(CommandHandler("products", self.show_our_products))

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("update", self.update_prices))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        self.application.add_handler(CommandHandler("add_admin", self.add_admin))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        self.application.add_handler(CallbackQueryHandler(self.admin_handler.handle_callback, pattern="^admin_"))
        self.application.add_handler(CallbackQueryHandler(self.user_handler.handle_callback, pattern="^user_"))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)

    async def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("prices", "–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"),
            BotCommand("products", "–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
        ]

        await self.application.bot.set_my_commands(commands)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        welcome_text = self.formatter.format_welcome_message(user.first_name)
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/prices - –ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤  
/products - –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/update - –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –≤—Ä—É—á–Ω—É—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/add_admin - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí° *–î–ª—è –∑–∞–∫–∞–∑–∞:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –Ω–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏.
        """

        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def show_prices(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
        try:
            products = self.product_ops.get_all_competitor_products()

            if not products:
                await update.message.reply_text("üì≠ –¶–µ–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
            competitors = {}
            for product in products:
                competitor = product['competitor']
                if competitor not in competitors:
                    competitors[competitor] = []
                competitors[competitor].append(product)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = self.formatter.format_competitor_prices(competitors)

            for message in messages:
                await update.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    disable_web_page_preview=True
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ü–µ–Ω: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω")

    async def show_our_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã"""
        try:
            products = self.product_ops.get_all_our_products()

            if not products:
                await update.message.reply_text("üì≠ –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return

            messages = self.formatter.format_our_products(products)

            for i, message in enumerate(messages):
                keyboard = self.user_handler.get_product_keyboard(products, i)
                await update.message.reply_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id

        if not self.admin_ops.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞
        self.admin_ops.update_admin_login(user_id)

        keyboard = await self.admin_handler.get_admin_keyboard()
        await update.message.reply_text(
            "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def update_prices(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤—Ä—É—á–Ω—É—é"""
        user_id = update.effective_user.id

        if not self.admin_ops.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")

        try:
            success_count = await self.update_all_prices()

            if success_count > 0:
                # –ü—É–±–ª–∏–∫—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
                await self.publish_price_update(context)
                await update.message.reply_text(f"‚úÖ –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω")

    async def update_all_prices(self) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω"""
        total_updated = 0

        # –ü–∞—Ä—Å–∏–Ω–≥ StrikePlanet
        if 'strikeplanet' in self.parsers:
            try:
                products = self.parsers['strikeplanet'].parse_products()
                for product in products:
                    self.product_ops.add_competitor_product(product)
                total_updated += len(products)
                logger.info(f"StrikePlanet: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ StrikePlanet: {e}")

        # –ü–∞—Ä—Å–∏–Ω–≥ Airsoft-Rus
        if 'airsoftrus' in self.parsers:
            try:
                products = self.parsers['airsoftrus'].parse_products()
                for product in products:
                    self.product_ops.add_competitor_product(product)
                total_updated += len(products)
                logger.info(f"Airsoft-Rus: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Airsoft-Rus: {e}")

        # –ü–∞—Ä—Å–∏–Ω–≥ VK —Ç–æ–≤–∞—Ä–æ–≤
        if 'vk' in self.parsers:
            try:
                products = self.parsers['vk'].parse_products()
                for product in products:
                    self.product_ops.add_our_product(product)
                total_updated += len(products)
                logger.info(f"VK: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ VK: {e}")

        return total_updated

    async def publish_price_update(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            changes = self.product_ops.get_price_changes(1)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å

            message = self.formatter.format_price_update_message(changes)

            await context.bot.send_message(
                chat_id=self.config.GROUP_CHAT_ID,
                message_thread_id=self.config.PRICE_TOPIC_ID,
                text=message,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id

        if not self.admin_ops.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        try:
            stats = await self.admin_handler.get_system_stats()
            await update.message.reply_text(stats, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id

        if not self.admin_ops.is_admin(user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
            return

        if not context.args:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>")
            return

        try:
            new_admin_id = int(context.args[0])
            success = self.admin_ops.add_admin(
                new_admin_id,
                update.effective_user.username,
                update.effective_user.full_name
            )

            if success:
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        except ValueError:
            await update.message.reply_text("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        pass

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)

        try:
            if update and update.effective_message:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

    async def on_startup(self, application):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        await self.setup_commands()
        await self.scheduler.start()

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for admin_id in self.config.ADMIN_IDS:
            existing_admin = self.admin_ops.get_admin(admin_id)
            if not existing_admin:
                self.admin_ops.add_admin(admin_id, "default_admin")
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {admin_id}")

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    async def on_shutdown(self, application):
        """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        await self.scheduler.stop()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.application.post_init = self.on_startup
        self.application.post_stop = self.on_shutdown

        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    bot = AirsoftBot()
    bot.run()